import * as zod from "zod";
import { Drawer } from "@medusajs/ui";
import { FormProvider, useForm } from "react-hook-form";
import { PostAdminUpdate{{toPascalCase module.modelName}} } from "../../../../api/admin/{{toKebabCase module.plural}}/validators";
import { sdk } from "../../../lib/sdk";
import { useNavigate } from "react-router-dom";
import { useQuery } from "@tanstack/react-query";
import { zodResolver } from "@hookform/resolvers/zod";
import { SelectField } from "../../../components/form/select-field";
import { InputField } from "../../../components/form/input-field";
import { FormLayout } from "../../../components/form/form-layout";
import { DrawerFormLayout } from "../../../components/drawer-form-layout";
import { {{toPascalCase module.modelName}} } from "../../../types";
import { useDrawer } from "../../../components/drawer";
{{#if module.fields}}
{{#each module.fields}}
{{#if relation}}
{{#if (eq relation.type "belongsTo")}}
import { List{{toPascalCase relation.model}}sRes } from "../../../types";
{{/if}}
{{/if}}
{{/each}}
{{/if}}

const schema = PostAdminUpdate{{toPascalCase module.modelName}};
type Edit{{toPascalCase module.modelName}}FormData = zod.infer<typeof schema>;

type {{toPascalCase module.modelName}}EditProps = {
  model: {{toPascalCase module.modelName}};
};

function {{toPascalCase module.modelName}}EditForm({ model }: Omit<{{toPascalCase module.modelName}}EditProps, "onClose">) {
  const { close } = useDrawer();
  const navigate = useNavigate();
  
  const form = useForm<Edit{{toPascalCase module.modelName}}FormData>({
    defaultValues: {
      {{#each module.fields}}
      {{#unless relation}}
      {{name}}: model.{{name}},
      {{/unless}}
      {{#if relation}}
      {{#if (eq relation.type "belongsTo")}}
      {{toSnakeCase name}}_id: model.{{toSnakeCase name}}_id,
      {{/if}}
      {{/if}}
      {{/each}}
    },
    resolver: zodResolver(schema),
  });

  {{#if module.fields}}
  {{#each module.fields}}
  {{#if relation}}
  {{#if (eq relation.type "belongsTo")}}
  const { data: {{toCamelCase relation.model}}sData } = useQuery<List{{toPascalCase relation.model}}sRes>({
    queryKey: ["{{toSnakeCase relation.model}}s"],
    queryFn: () => sdk.client.fetch("/admin/{{toKebabCase ../module.plural}}/{{toKebabCase relation.model}}s"),
  });

  const {{toCamelCase relation.model}}s = {{toCamelCase relation.model}}sData?.{{toSnakeCase relation.model}}s || [];
  {{/if}}
  {{/if}}
  {{/each}}
  {{/if}}

  const handleSubmit = form.handleSubmit(async (data) => {
    try {
      await sdk.client.fetch(`/admin/{{toKebabCase module.plural}}/${model.id}`, {
        method: "POST",
        body: data,
      });
      
      close();
      navigate("/{{toKebabCase module.plural}}");
    } catch (error) {
      console.error("Failed to update {{toLowerCase module.modelName}}:", error);
    }
  });

  return (
    <FormProvider {...form}>
      <DrawerFormLayout
        title="Edit {{toTitleCase module.modelName}}"
        description="Edit {{toLowerCase module.modelName}} details"
        onSubmit={handleSubmit}
      >
        <FormLayout>
          {{#each module.fields}}
          {{#unless relation}}
          {{#if (eq type "string")}}
          <InputField
            name="{{name}}"
            control={form.control}
            label="{{toTitleCase name}}"
          />
          {{else if (eq type "number")}}
          <InputField
            name="{{name}}"
            control={form.control}
            label="{{toTitleCase name}}"
            type="number"
          />
          {{else if (eq type "boolean")}}
          <InputField
            name="{{name}}"
            control={form.control}
            label="{{toTitleCase name}}"
            type="checkbox"
          />
          {{/if}}
          {{/unless}}
          {{#if relation}}
          {{#if (eq relation.type "belongsTo")}}
          <SelectField
            name="{{toSnakeCase name}}_id"
            control={form.control}
            label="{{toTitleCase name}}"
            placeholder="Select a {{toLowerCase name}}..."
            options={ {{toCamelCase relation.model}}s }
          />
          {{/if}}
          {{/if}}
          {{/each}}
        </FormLayout>
      </DrawerFormLayout>
    </FormProvider>
  );
}

export function {{toPascalCase module.modelName}}Edit(props: {{toPascalCase module.modelName}}EditProps) {
  return (
    <Drawer.Content aria-describedby="edit-{{toKebabCase module.modelName}}-description">
      <{{toPascalCase module.modelName}}EditForm model={props.model} />
    </Drawer.Content>
  );
} 