import * as zod from "zod";
import { Drawer } from "@medusajs/ui";
import { FormProvider, useForm } from "react-hook-form";
import { PostAdminCreate{{toPascalCase module.singular}} } from "../../../../api/admin/{{toKebabCase module.plural}}/validators";
import { sdk } from "../../../lib/sdk";
import { useNavigate } from "react-router-dom";
import { useQuery } from "@tanstack/react-query";
import { zodResolver } from "@hookform/resolvers/zod";
import { SelectField } from "../../../components/form/select-field";
import { InputField } from "../../../components/form/input-field";
import { SwitchField } from "../../../components/form/switch-field";
import { FormLayout } from "../../../components/form/form-layout";
import { DrawerFormLayout } from "../../../components/drawer-form-layout";
import { {{toPascalCase module.singular}} } from "../../../types";
import { useDrawer } from "../../../components/drawer";
{{#with (find module.models "name" module.singular)}}
{{#if fields}}
{{#each fields}}
{{#if relation}}
import { List{{toPascalCase relation.model}}sRes } from "../../../types";
{{/if}}
{{/each}}
{{/if}}

const schema = PostAdminCreate{{toPascalCase singular}};
type {{toPascalCase singular}}EditFormData = zod.infer<typeof schema>;

type {{toPascalCase singular}}EditProps = {
  {{toCamelCase singular}}: {{toPascalCase singular}};
  onClose: () => void;
};

function {{toPascalCase singular}}EditForm({ {{toCamelCase singular}} }: Omit<{{toPascalCase singular}}EditProps, "onClose">) {
  const { close } = useDrawer();
  const navigate = useNavigate();
  
  const form = useForm<{{toPascalCase singular}}EditFormData>({
    defaultValues: {
      {{#each fields}}
      {{#if (eq type "text")}}
      {{toSnakeCase name}}: {{toCamelCase ../singular}}.{{toSnakeCase name}},
      {{/if}}
      {{#if (eq type "boolean")}}
      {{toSnakeCase name}}: {{toCamelCase ../singular}}.{{toSnakeCase name}},
      {{/if}}
      {{#if (eq type "number")}}
      {{toSnakeCase name}}: {{toCamelCase ../singular}}.{{toSnakeCase name}},
      {{/if}}
      {{#if relation}}
      {{#if (eq relation.type "belongsTo")}}
      {{toSnakeCase name}}_id: {{toCamelCase ../singular}}.{{toSnakeCase name}}_id,
      {{/if}}
      {{#if (eq relation.type "hasMany")}}
      {{toSnakeCase name}}_ids: {{toCamelCase ../singular}}.{{toSnakeCase name}}_ids,
      {{/if}}
      {{#if (eq relation.type "manyToMany")}}
      {{toSnakeCase name}}_ids: {{toCamelCase ../singular}}.{{toSnakeCase name}}_ids,
      {{/if}}
      {{/if}}
      {{/each}}
    },
    resolver: zodResolver(schema),
  });

  {{#if fields}}
  {{#each fields}}
  {{#if relation}}
  {{#if (eq relation.type "belongsTo")}}
  const { data: {{toCamelCase relation.model}}Data } = useQuery<List{{toPascalCase relation.model}}sRes>({
    queryKey: ["{{toSnakeCase relation.model}}s"],
    queryFn: () => sdk.client.fetch("/admin/{{toKebabCase ../../module.plural}}/{{toKebabCase (plural relation.model)}}"),
  });

  const {{toSnakeCase (plural relation.model)}} = {{toCamelCase relation.model}}Data?.{{toSnakeCase (plural relation.model)}} || [];
  {{/if}}
  {{/if}}
  {{/each}}
  {{/if}}

  const handleSubmit = form.handleSubmit(async (data) => {
    try {
      await sdk.client.fetch(`/admin/{{toKebabCase ../module.plural}}/{{{propAccess (toCamelCase singular) "id" templateLiteral=true}}}`, {
        method: "POST",
        body: data,
      });
      
      close();
      navigate("/{{toKebabCase ../module.plural}}");
    } catch (error) {
      console.error("Failed to update {{toLowerCase singular}}:", error);
    }
  });

  return (
    <FormProvider {...form}>
      <DrawerFormLayout
        title="Edit {{toTitleCase singular}}"
        description="Edit {{toLowerCase singular}} details"
        onSubmit={handleSubmit}
      >
        <FormLayout>
          {{#each fields}}
          {{#if (eq type "text")}}
          <InputField
            name="{{toSnakeCase name}}"
            control={form.control}
            label="{{toTitleCase name}}"
          />
          {{/if}}
          {{#if (eq type "boolean")}}
          <SwitchField
            name="{{toSnakeCase name}}"
            control={form.control}
            label="{{toTitleCase name}}"
          />
          {{/if}}
          {{#if (eq type "number")}}
          <InputField
            name="{{toSnakeCase name}}"
            control={form.control}
            label="{{toTitleCase name}}"
            type="number"
          />
          {{/if}}
          {{#if relation}}
          {{#if (eq relation.type "belongsTo")}}
          <SelectField
            name="{{toSnakeCase name}}_id"
            control={form.control}
            label="{{toTitleCase name}}"
            placeholder="Select a {{toLowerCase name}}..."
            options={ {{toSnakeCase (plural relation.model)}} }
            {{#if relation.dependsOn}}
            disabled={!form.watch("{{toSnakeCase relation.dependsOn}}_id")}
            {{/if}}
          />
          {{/if}}
          {{/if}}
          {{/each}}
        </FormLayout>
      </DrawerFormLayout>
    </FormProvider>
  );
}

export function {{toPascalCase singular}}Edit(props: {{toPascalCase singular}}EditProps) {
  return (
    <Drawer.Content aria-describedby="edit-{{toKebabCase singular}}-description">
      <{{toPascalCase singular}}EditForm {...props} />
    </Drawer.Content>
  );
}{{/with}}
