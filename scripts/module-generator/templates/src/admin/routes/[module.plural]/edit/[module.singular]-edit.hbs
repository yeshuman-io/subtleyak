import * as zod from "zod";
import { Drawer } from "@medusajs/ui";
import { FormProvider, useForm } from "react-hook-form";
import { sdk } from "../../../lib/sdk";
import { useNavigate } from "react-router-dom";
import { useQuery } from "@tanstack/react-query";
import { zodResolver } from "@hookform/resolvers/zod";
import { SelectField } from "../../../components/form/select-field";
import { InputField } from "../../../components/form/input-field";
import { FormLayout } from "../../../components/form/form-layout";
import { DrawerFormLayout } from "../../../components/drawer-form-layout";
import { useDrawer } from "../../../components/drawer";
import { PostAdminCreate{{toPascalCase module.moduleModel.singular}} } from "../../../../api/admin/{{toKebabCase module.plural}}/validators";
import { {{toPascalCase module.moduleModel.singular}} } from "../../../types";
{{#each module.moduleModel.fields}} 
{{#if relation}}
{{#if (eq relation.type "belongsTo")}}
import { List{{toPascalCase relation.model}}sRes } from "../../../types";
{{/if}}
{{/if}}
{{/each}}

const schema = PostAdminCreate{{toPascalCase module.moduleModel.singular}};
type {{toPascalCase module.moduleModel.singular}}EditFormData = zod.infer<typeof schema>;

type {{toPascalCase module.moduleModel.singular}}EditProps = {
  {{toCamelCase module.moduleModel.singular}}: {{toPascalCase module.moduleModel.singular}};
  onClose: () => void;
};

function {{toPascalCase module.moduleModel.singular}}EditForm({ {{toCamelCase module.moduleModel.singular}} }: Omit<{{toPascalCase module.moduleModel.singular}}EditProps, "onClose">) {
  const { close } = useDrawer();
  const navigate = useNavigate();
  
  const form = useForm<{{toPascalCase module.moduleModel.singular}}EditFormData>({
    defaultValues: {
      {{! TODO: make this a partial template }}
      {{#each module.moduleModel.fields}}
      {{#if (eq type "text")}}
      {{toSnakeCase name}}: {{toCamelCase name}}.{{toSnakeCase name}},
      {{/if}}
      {{#if (eq type "boolean")}}
      {{toSnakeCase name}}: {{toCamelCase name}}.{{toSnakeCase name}},
      {{/if}}
      {{#if (eq type "number")}}
      {{toSnakeCase name}}: {{toCamelCase name}}.{{toSnakeCase name}},
      {{/if}}
      {{#if relation}}
      {{#if (eq relation.type "belongsTo")}}
      {{toSnakeCase name}}_id: {{toCamelCase name}}.{{toSnakeCase name}}_id,
      {{/if}}
      {{#if (eq relation.type "hasMany")}}
      {{toSnakeCase name}}_ids: {{toCamelCase name}}.{{toSnakeCase name}}_ids,
      {{/if}}
      {{#if (eq relation.type "manyToMany")}}
      {{toSnakeCase name}}_ids: {{toCamelCase name}}.{{toSnakeCase name}}_ids,
      {{/if}}
      {{/if}}
      {{/each}}
    },
    resolver: zodResolver(schema),
  });

  const handleSubmit = form.handleSubmit(async (data) => {
    try {
      await sdk.client.fetch(`/admin/{{toKebabCase module.plural}}/{{{propAccess (toCamelCase module.moduleModel.singular) "id" templateLiteral=true}}}`, {
        method: "POST",
        body: data,
      });
      
      close();
      navigate("/{{toKebabCase module.moduleModel.plural}}");
    } catch (error) {
      console.error("Failed to update {{module.moduleModel.singular}}:", error);
    }
  });

  return (
    <FormProvider {...form}>
      <DrawerFormLayout
        title="Edit {{toTitleCase module.moduleModel.singular}}"
        description="Edit {{toLowerCase module.moduleModel.singular}} details"
        onSubmit={handleSubmit}
      >
        <FormLayout>
          {{#each module.moduleModel.fields}}
          {{#if (eq type "text")}}
          <InputField
            name="{{toSnakeCase name}}"
            control={form.control}
            label="{{toTitleCase name}}"
          />
          {{/if}}
          {{#if (eq type "boolean")}}
          <SwitchField
            name="{{toSnakeCase name}}"
            control={form.control}
            label="{{toTitleCase name}}"
          />
          {{/if}}
          {{#if (eq type "number")}}
          <InputField
            name="{{toSnakeCase name}}"
            control={form.control}
            label="{{toTitleCase name}}"
            type="number"
          />
          {{/if}}
          {{#if relation}}
          {{#if (eq relation.type "belongsTo")}}
          <SelectField
            name="{{toSnakeCase name}}_id"
            control={form.control}
            label="{{toTitleCase name}}"
            placeholder="Select a {{toLowerCase name}}..."
            {{#with (find @root.module.models "name" (toKebabCase relation.model))}}
            options={{jsx-expr "{{toLowerCase plural}}"}}
            {{/with}}
            {{#if relation.dependsOn}}
            disabled={!form.watch("{{toSnakeCase relation.dependsOn}}_id")}
            {{/if}}
          />
          {{/if}}
          {{/if}}
          {{/each}}
        </FormLayout>
      </DrawerFormLayout>
    </FormProvider>
  );
}

export function {{toPascalCase module.moduleModel.singular}}Edit(props: {{toPascalCase module.moduleModel.singular}}EditProps) {
  return (
    <Drawer.Content aria-describedby="edit-{{toKebabCase module.moduleModel.singular}}-description">
      <{{toPascalCase module.moduleModel.singular}}EditForm {{toCamelCase module.moduleModel.singular}}={{jsx-expr "props.{{module.moduleModel.singular}}"}} />
    </Drawer.Content>
  )
}
