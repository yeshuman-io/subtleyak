/**
 * This file is auto-generated and will be overwritten by subsequent generations.
 * Manual changes should be made to the generator templates instead.
 */
import { 
  defineMiddlewares,
  validateAndTransformQuery,
  validateAndTransformBody 
} from "@medusajs/framework/http"
import { createFindParams } from "@medusajs/medusa/api/utils/validators"
import { z } from "zod"
import { 
  PostAdminCreate{{toPascalCase model.name}},
  PostAdminUpdate{{toPascalCase model.name}}
} from "./validators"

export const Get{{toPascalCase model.name}}Schema = createFindParams()
{{#if (hasRelations model.fields "belongsTo")}}
  .extend({
    {{#each model.fields}}
    {{#if relation}}
    {{#if (eq relation.type "belongsTo")}}
    {{toSnakeCase name}}_id: z.string().optional(),
    {{/if}}
    {{/if}}
    {{/each}}
  })
{{/if}}

export default defineMiddlewares({
  routes: [
    // List {{toSentenceCase model.name}}s
    {
      matcher: "/admin/{{ module.plural }}/{{model.plural}}",
      method: "GET",
      middlewares: [
        validateAndTransformQuery(Get{{toPascalCase model.name}}Schema, {
          defaults: [
            "id",
            {{#each model.fields}}
            {{#unless relation}}
            "{{toSnakeCase name}}"{{#unless @last}},{{/unless}}
            {{else if (eq relation.type "belongsTo")}}
            "{{toSnakeCase name}}.*"{{#unless @last}},{{/unless}}
            {{/unless}}
            {{/each}}
          ],
          isList: true
        })
      ]
    },

    // Update {{toSentenceCase model.name}}
    {
      matcher: "/admin/{{toKebabCase module.plural}}/{{toKebabCase model.plural}}/:id",	
      method: "POST",
      middlewares: [
        validateAndTransformBody(PostAdminUpdate{{toPascalCase model.name}})
      ]
    },

    // Create {{toSentenceCase model.name}}
    {
      matcher: "/admin/{{toKebabCase module.plural}}/{{toKebabCase model.plural}}",	
          method: "POST",
      middlewares: [
        validateAndTransformBody(PostAdminCreate{{toPascalCase model.name}})
      ]
    },

  ] as const
}) 


{{! FOR LATER

Based on the information provided in the knowledge sources and Medusa's conventions, there isn't a specific documented convention for altering types used in the same endpoint for different operations like POST (create) and PUT/PATCH (update). However, we can infer some best practices from Medusa's approach to API design.

In Medusa, it's common to have different schemas for create and update operations, even if they share the same endpoint. This is typically handled through the request body validation middleware.

Here's a suggested approach that aligns with Medusa's practices:

Keep your separate types for create and update operations:
Code
Ask AI
export type AdminCreateVehicleMakeReq = z.infer<typeof PostAdminCreateVehicleMake>;
export type AdminUpdateVehicleMakeReq = z.infer<typeof PostAdminUpdateVehicleMake>;
In your route file, you can use a union type to handle both create and update operations:
Code
Ask AI
type VehicleMakeReqType = AdminCreateVehicleMakeReq | AdminUpdateVehicleMakeReq;

export const POST = async (
  req: MedusaRequest<VehicleMakeReqType>,
  res: MedusaResponse
) => {
  // Your route logic here
};
In your middleware configuration (typically in src/api/middlewares.ts), you can use different validation schemas based on the presence of an ID in the request:
Code
Ask AI
import {
  validateAndTransformBody,
  defineMiddlewares,
} from "@medusajs/framework/http"
import { PostAdminCreateVehicleMake, PostAdminUpdateVehicleMake } from "./validators"

export default defineMiddlewares({
  routes: [
    {
      matcher: "/admin/vehicles/models",
      method: "POST",
      middlewares: [
        validateAndTransformBody((req) => {
          // If an ID is present in the body, use the update schema
          // Otherwise, use the create schema
          return req.body.id ? PostAdminUpdateVehicleMake : PostAdminCreateVehicleMake
        }),
      ],
    },
  ],
})

}}