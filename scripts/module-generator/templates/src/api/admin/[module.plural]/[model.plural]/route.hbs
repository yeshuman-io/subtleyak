import { z } from "zod";
import { MedusaRequest, MedusaResponse } from "@medusajs/framework/http";
import { create{{toPascalCase model.name}}Workflow } from "../../../../workflows/create-{{toKebabCase model.name}}";
import { PostAdminCreate{{toPascalCase model.name}} } from "./validators";

type QueryResponse = {
  data: any[];
  metadata: {
    count: number;
    take: number;
    skip: number;
  };
};
//asdfasdf
export const GET = async (req: MedusaRequest, res: MedusaResponse) => {
  const query = req.scope.resolve("query");

  const queryOptions = {
    entity: "{{toSnakeCase model.name}}",
    ...req.queryConfig,
    filters: {
      ...req.queryConfig?.filters,
      {{#each model.fields}}
      {{#if relation}}
      {{#if (eq relation.type "belongsTo")}}
      ...(req.query.{{toSnakeCase name}}_id ? { {{toSnakeCase name}}_id: req.query.{{toSnakeCase name}}_id } : {}),
      {{/if}}
      {{/if}}
      {{/each}}
    },
  };

  const { data: {{toSnakeCase model.plural}}, metadata } = (await query.graph(
    queryOptions
  )) as QueryResponse;

  res.json({
    {{toSnakeCase model.plural}},
    count: metadata.count,
    limit: metadata.take,
    offset: metadata.skip,
  });
};

type PostAdminCreate{{toPascalCase model.name}}Type = z.infer<
  typeof PostAdminCreate{{toPascalCase model.name}}
>;

export const POST = async (
  req: MedusaRequest<PostAdminCreate{{toPascalCase model.name}}Type>,
  res: MedusaResponse
) => {
  const { result } = await create{{toPascalCase model.name}}Workflow(req.scope).run({
    input: req.validatedBody,
  });

  res.json({ {{toCamelCase model.name}}: result });
}; 