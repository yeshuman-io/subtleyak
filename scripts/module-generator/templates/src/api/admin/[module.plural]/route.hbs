import { z } from "zod";
import { MedusaRequest, MedusaResponse } from "@medusajs/framework/http";
import { create{{toPascalCase module.moduleModel.singular}}Workflow } from "../../../workflows/{{module.plural}}/create-{{toKebabCase module.moduleModel.singular}}";
import { PostAdminCreate{{toPascalCase module.moduleModel.singular}} } from "./validators";

type QueryResponse = {
  data: any[];
  metadata: {
    count: number;
    take: number;
    skip: number;
  };
};

export const GET = async (req: MedusaRequest, res: MedusaResponse) => {
  const query = req.scope.resolve("query");

    const queryOptions = {
      entity: "{{toSnakeCase module.moduleModel.name}}",
      ...req.queryConfig,
      filters: {
        ...req.queryConfig?.filters,
      },
    };

  try {
    const { data: {{toSnakeCase module.moduleModel.plural}}, metadata } = (await query.graph(
      queryOptions
    )) as QueryResponse;

  res.json({
    {{toSnakeCase module.moduleModel.plural}},
    count: metadata.count,
    limit: metadata.take,
    offset: metadata.skip,
    });
  } catch (error) {
    console.error("Error fetching {{toPascalCase module.moduleModel.plural}}:", error);
    res.status(500).json({ error: "An error occurred while fetching {{toPascalCase module.moduleModel.plural}}" });
  }
};

type PostAdminCreate{{toPascalCase module.moduleModel.singular}}Type = z.infer<
  typeof PostAdminCreate{{toPascalCase module.moduleModel.singular}}
>;

export const POST = async (
  req: MedusaRequest<PostAdminCreate{{toPascalCase module.moduleModel.singular}}Type>,
  res: MedusaResponse
) => {
  const { result } = await create{{toPascalCase module.moduleModel.singular}}Workflow(req.scope).run({
    input: req.validatedBody,
  });

  res.json({ {{toSnakeCase module.moduleModel.plural}}: result });
}; 