import { z } from "zod";
import { createFindParams } from "@medusajs/medusa/api/utils/validators";

export const GetSchema = createFindParams();

export const PostAdminCreate{{toPascalCase module.modelName}} = z.object({
  {{#each module.fields}}
  {{#unless relation}}
  {{name}}: z.{{#if (eq type "string")}}string(){{else}}{{type}}(){{/if}}{{#if required}}.min(1, "{{toTitleCase name}} is required"){{/if}},
  {{/unless}}
  {{#if relation}}
  {{#if (eq relation.type "belongsTo")}}
  {{toSnakeCase name}}_id: z.string().min(1, "{{toTitleCase name}} is required"),
  {{/if}}
  {{/if}}
  {{/each}}
});

export const PostAdminUpdate{{toPascalCase module.modelName}} = z.object({
  {{#each module.fields}}
  {{#unless relation}}
  {{name}}: z.{{#if (eq type "string")}}string(){{else}}{{type}}(){{/if}}{{#unless required}}.optional(){{/unless}},
  {{/unless}}
  {{#if relation}}
  {{#if (eq relation.type "belongsTo")}}
  {{toSnakeCase name}}_id: z.string().optional(),
  {{/if}}
  {{/if}}
  {{/each}}
});

export type AdminCreate{{toPascalCase module.modelName}}Req = z.infer<typeof PostAdminCreate{{toPascalCase module.modelName}}>;
export type AdminUpdate{{toPascalCase module.modelName}}Req = z.infer<typeof PostAdminUpdate{{toPascalCase module.modelName}}>;

export type AdminList{{toPascalCase module.modelName}}Res = {
  {{toSnakeCase module.plural}}: any[];
  count: number;
  limit: number;
  offset: number;
}; 