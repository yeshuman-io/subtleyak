import { defineRouteConfig } from "@medusajs/admin-sdk";
import { createDataTableColumnHelper, FocusModal, Drawer } from "@medusajs/ui";
import { {{toPascalCase model.name}} } from "../../../types";
import { DataTablePage } from "../../../components/data-table-page";
import { {{toPascalCase model.name}}Create } from "./create/{{toKebabCase model.name}}-create";
import { useState } from "react";
import { ActionMenu } from "../../../components/action-menu";
import { Pencil } from "@medusajs/icons";
import { {{toPascalCase model.name}}Edit } from "./edit/{{toKebabCase model.name}}-edit";

const columnHelper = createDataTableColumnHelper<{{toPascalCase model.name}}>();

const {{toPascalCase model.name}}Page = () => {
  const [showCreate, setShowCreate] = useState(false);
  const [editing{{toPascalCase model.name}}, setEditing{{toPascalCase model.name}}] = useState<{{toPascalCase model.name}} | null>(null);

  const columns = [
    columnHelper.accessor("id", {
      header: "ID",
    }),
    columnHelper.accessor("name", {
      header: "Name",
      enableSorting: true,
    }),
    {{#each model.fields}}
    {{#if (eq type "relation")}}
    columnHelper.accessor("{{toSnakeCase name}}.name", {
      header: "{{toTitleCase name}}",
      enableSorting: true,
    }),
    {{/if}}
    {{/each}}
    columnHelper.accessor("actions", {
      header: "",
      cell: ({ row }) => {
        const item = row.original;
        return (
          <ActionMenu
            groups={[
              {
                actions: [
                  {
                    label: "Edit",
                    icon: <Pencil />,
                    onClick: () => setEditing{{toPascalCase model.name}}(item),
                  },
                ],
              },
            ]}
          />
        );
      },
    }),
  ];

  return (
    <>
      <DataTablePage<{{toPascalCase model.name}}>
        title="{{toTitleCase model.plural}}"
        subtitle="Manage your {{toLowerCase model.plural}}"
        endpoint="/admin/{{toKebabCase module.plural}}/{{toKebabCase model.plural}}"
        columns={columns}
        queryKey="{{toSnakeCase model.plural}}"
        dataKey="{{toSnakeCase model.plural}}"
        actions={[
          {
            type: "button",
            props: {
              variant: "secondary",
              size: "small",
              children: "Create",
              onClick: () => setShowCreate(true),
            },
          },
        ]}
      />
      {showCreate && (
        <FocusModal open={showCreate} onOpenChange={setShowCreate}>
          <{{toPascalCase model.name}}Create onClose={() => setShowCreate(false)} />
        </FocusModal>
      )}
      {editing{{toPascalCase model.name}} && (
        <Drawer open onOpenChange={() => setEditing{{toPascalCase model.name}}(null)}>
          <{{toPascalCase model.name}}Edit 
            {{toCamelCase model.name}}={editing{{toPascalCase model.name}}} 
            onClose={() => setEditing{{toPascalCase model.name}}(null)} 
          />
        </Drawer>
      )}
    </>
  );
}

export const config = defineRouteConfig({
  label: "{{toTitleCase model.plural}}",
});

export default {{toPascalCase model.name}}Page; 